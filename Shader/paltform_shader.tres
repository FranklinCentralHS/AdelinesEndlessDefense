[gd_resource type="VisualShader" load_steps=3 format=3 uid="uid://dlsbq15kkms6l"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_ohxva"]
output_port_for_preview = 0
expanded_output_ports = [0]
input_name = "color"

[sub_resource type="VisualShaderNodeIf" id="VisualShaderNodeIf_yamg6"]
default_input_values = [0, 0.0, 1, 0.0, 2, 0.001, 3, Vector3(0, 0, 0), 4, Vector3(0, 0, 0), 5, Vector3(0, 0, 0)]
expanded_output_ports = [0]

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;




void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;
	float n_out2p2 = n_out2p0.g;


	vec3 n_out3p0;
// If:3
	float n_in3p1 = 0.00000;
	float n_in3p2 = 0.00100;
	vec3 n_in3p3 = vec3(0.00000, 0.00000, 0.00000);
	if(abs(n_out2p2 - n_in3p1) < n_in3p2)
	{
		n_out3p0 = n_in3p3;
	}
	else if(n_out2p2 < n_in3p1)
	{
		n_out3p0 = vec3(n_out2p0.xyz);
	}
	else
	{
		n_out3p0 = vec3(n_out2p0.xyz);
	}
	float n_out3p3 = n_out3p0.b;


// Output:0
	COLOR.rgb = vec3(n_out3p3);


}
"
graph_offset = Vector2(120.582, 56.2978)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(680, 240)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_ohxva")
nodes/fragment/2/position = Vector2(-80, 140)
nodes/fragment/3/node = SubResource("VisualShaderNodeIf_yamg6")
nodes/fragment/3/position = Vector2(380, 140)
nodes/fragment/connections = PackedInt32Array(2, 2, 3, 0, 2, 0, 3, 4, 2, 0, 3, 5, 3, 3, 0, 0)
